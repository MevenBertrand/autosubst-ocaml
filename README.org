#+TITLE: Autosubst OCaml

This is an OCaml reimplementation of the Autosusbt 2 code generator by Kathrin Stark. 
Like Autosubst 2, it supports well-scoped & unscoped syntax as well as variadic & polyadic syntax & functors.
It does not support Autosubst 2's modular syntax.

Being implemented in OCaml, it uses Coq as a library to construct and pretty print the code it generates.

* Install
** Opam 
First, install opam following the [[https://opam.ocaml.org/doc/Install.html][directions for your operating system]].

** Switch
It is best practice to create a new opam switch to not cause conflicts with any of your other installed packages.
We will also need to add the Coq repository.
#+BEGIN_SRC bash
opam switch create autosubst-ocaml ocaml-base-compiler.4.09.1
eval $(opam env)
opam repo add coq-released https://coq.inria.fr/opam/released
#+END_SRC

** Setup
You can install the dependencies with
#+BEGIN_SRC bash
opam install --deps-only .
#+END_SRC
As a dependency we also use the monad library from here https://github.com/Denommus/monadic which is not on opam, so we include the sources in the repo.
You can install the program itself with (this also installs missing dependencies)
#+BEGIN_SRC bash
opam install .
#+END_SRC
The binary will be paced as `autosubst` on your path.

* Run 
To display a list of all program inputs.
#+BEGIN_SRC bash
autosubst --help
#+END_SRC

En example invocation that shows how to generate code for the untyped lambda calculus.
#+BEGIN_SRC bash
autosubst signatures/utlc.sig -o output/utlc.v -s ucoq
#+END_SRC

** Signatures
You specify the input language using our input syntax.
The syntax is described in my thesis at https://www.ps.uni-saarland.de/~dapprich/bachelor.php
Example signature files are in the ./signatures directory.

The following example contains all possible rules.
#+begin_src
-- comments are like in Haskell
tm : Type -- sort declarations
nat : Type -- preexisting sort declaration, it must not have any constructors

list : Functor -- functor declarations, only "list", "prod", and "cod" are allowed

-- declaring some constructors for ty
arr : ty -> ty -> ty
all : (bind ty in ty) -> ty -- this declares "all" as constructor with a binder that binds a new "ty" variable in a "ty" argument and results in a "ty"

-- declaring some constructos for tm
app : tm -> list (tm) -> tm               -- application of the list functor to the sort "tm"
lam (p: nat) : (bind <p, tm> in tm) -> tm -- this declares "lam" as a constructor with parameter "p" which is then used in a variadic binder (i.e. it binds p-many values of "tm")
const : nat -> tm                         
#+end_src

* Development
** Dev Dependencies
Some dependencies for developing in emacs.
#+BEGIN_SRC bash
opam install merlin utop ocp-indent ocamlformat
opam user-setup install
#+END_SRC

** Build
Create the switch, install the dependencies, and then:
#+BEGIN_SRC bash
dune build
dune exec -- bin/main.exe --help
# e.g. to generate code for the untyped lambda calculus
dune exec -- bin/main.exe signatures/utlc.sig -o output/utlc.v -s ucoq
#+END_SRC


* Repo
You can find the code at https://gitlab.com/addapp/autosubst-ocaml

* case-studies/
The demos are generated by the script ./generate.sh. They can be found in the case-studies/ directory.

** examples/
contains the generated sources for a couple of different signatures.
You can issue `make` in this directory to have Coq compile all the files. 

** examples-lt813/
contains the generated sources for a couple of different signatures for Coq versions below 8.13 (tested down to 8.10)
You can issue `make` in this directory to have Coq compile all the files.
But Coq 8.13 will complain about missing attributes!

** tapl-exercise/
contains the case study I implemented for the exercise from TAPL
You can issue `make` in this directory to have Coq compile all the files.

** kathrin/coq/
contains a subset of the case studies by Kathrin Stark from https://www.ps.uni-saarland.de/~kstark/thesis/
Several metatheorems are proved, mostly about the simply typed lambda calculus and variations of System F.
The case study was originally for Coq 8.9 and due to different handling of implicit arguments it does not work directly with Coq 8.13, so to run this we install Coq 8.9 on a different switch.

#+BEGIN_SRC src
opam switch create autosubst-ocaml-89 ocaml-base-compiler.4.07.1
opam repo add coq-released https://coq.inria.fr/opam/released
opam install coq.8.9.1
#+END_SRC

We generate the languages for the cases studies using Autosubst OCaml with functional extensionality disabled (see the ./generate.sh script).
Only Chapter6/variadic_fin.v uses functional extensionality because the language is defined with the cod functor which needs the axiom.

 | Chapter3    | Chapter6     | Chapter9 | Chapter10 |
 |-------------+--------------+----------+-----------|
 | utlc_scoped | utlc_pairs   | stlc     | sysf      |
 | utlc_pure   | sysf_cbv     |          | sysf_pat  |
 |             | variadic_fin |          |           |

You can issue `make` in this directory to have Coq compile all the case studies.

*** Notes
I was not able to compile the original case study found at https://www.ps.uni-saarland.de/~kstark/thesis/download/code.tar.xz with Coq 8.9.1 from opam either. 
Kathrin probably used a version from source and there was slightly different reduction behaviour. 
Mostly when using the renamify tactic I had to manually insert a change. 
You can find the places where I changed stuff by grepping for "a.d.".
