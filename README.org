#+TITLE: Autosubst OCaml

This is an OCaml implementation of parts of the Autosusbt 2 compiler by Kathrin Stark. It supports well-scoped & unscoped syntax as well as variadic & polyadic syntax & functors (except the combination of variadic + unscoped syntax which the original did not support either).
Being implemented in OCaml it uses Coq as a library to directly construct the AST of lemmas/definitions etc. and also print out the AST to a file.

* Setup
** Switch
#+BEGIN_SRC bash
opam switch create autosubst-ocaml ocaml-base-compiler.4.11.1
opam repo add coq-released https://coq.inria.fr/opam/released
#+END_SRC

** Build Dependencies
#+BEGIN_SRC bash
opam install dune coq.8.12.1 angstrom ocamlgraph ppx_deriving
#+END_SRC
As a dependency I also use the monad library from here https://github.com/Denommus/monadic which is not on opam yet so I included the sources.

** Dev Dependencies
#+BEGIN_SRC bash
opam install merlin utop ocp-indent ocamlformat
#+END_SRC

* Build & Run
Create the switch and install the dev dependencies and then:
#+BEGIN_SRC bash
dune build
dune exec -- bin/main.exe <signature file> <output file> [coq|ucoq]
# e.g. dune exec -- bin/main.exe signatures/fol.sig case-studies/examples/fol/fol_wellscoped.v coq
#+END_SRC

* Repo
You can find the code at https://gitlab.com/addapp/autosubst-ocaml
* Demo
The demos are generated by the generate.sh. They can be found in case-studies/

** examples/
contains just the generated sources for a couple of different signatures. You can issue `make` in this directory to have Coq compile all the files. The lemmas/definitions/fixpoints are equivalent to those generated by Autosubst2. The classes/instances/tactics are not generated.
** cs-kathrin/
contains the case studies by Kathrin Stark from https://www.ps.uni-saarland.de/~kstark/thesis/ where a couple of metatheoretic theorems are proved about different languages. The case study was originally for Coq 8.9 and due to different handling of implicit arguments it does not work directly with Coq 8.12.1, so to run this we install Coq 8.9 on a different switch.

#+BEGIN_SRC src
opam switch create autosubst-ocaml-cs ocaml-base-compiler.4.09.1
opam repo add coq-released https://coq.inria.fr/opam/released
opam install coq.8.9.1 coq-equations.1.2.1+8.9
#+END_SRC

You can also issue `make` there to have Coq compile all the files.
Of particular interest are the files
 | Chapter3    | Chapter6     | Chapter9 | Chapter10 |
 |-------------+--------------+----------+-----------|
 | utlc_scoped | utlc_pairs   | stlc     | sysf      |
 | utlc_pure   | sysf_cbv     |          | sysf_pat  |
 |             | variadic_fin |          |           |
which are all generated by generate.sh and then used in other files to prove metatheorems like the POPLMark challenge.

*** Some Problems
I was not able to compile the original case study found at https://www.ps.uni-saarland.de/~kstark/thesis/download/code.tar.xz with Coq 8.9.1 from opam either. Kathrin probably used a version from source and there was slightly different reduction behaviour. Mostly when using the renamify tactic I had to manually insert a change. You can find the places where I changed stuff by grepping for "adrian".

Furthermore, I noticed that I parse nested functor applications incorrectly. The relevant file is in case-studies/kathrin/coq/Chapter10/sysf_rec.sig. At the moment I cannot compile it but I would argue that the way strings are used in the signature easily leads to errors and when I implement nested functor application I would use a different syntax.
