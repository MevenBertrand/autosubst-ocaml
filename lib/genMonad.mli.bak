module H = Hsig
module M = Monadic

module GenM : sig
  module StringMon : M.Monad.MONOID with type t = string

  include module type of (
    Rws.MakeT
      (Monadic.Result.Make(String))
      (struct type t = H.t end)
      (StringMon)
      (struct type t = (H.vId * int) list end))

  val error : string -> 'a t
end

(* val substOf : H.tId -> H.tId list GenM.t
 *
 * val isFeature : H.tId -> bool GenM.t *)
